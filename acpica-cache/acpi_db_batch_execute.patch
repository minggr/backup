diff --git a/drivers/acpi/acpica/acdebug.h b/drivers/acpi/acpica/acdebug.h
index a4fb001..ade4e6d 100644
--- a/drivers/acpi/acpica/acdebug.h
+++ b/drivers/acpi/acpica/acdebug.h
@@ -55,6 +55,13 @@ struct argument_info {
 	char *name;		/* Argument Name */
 };
 
+typedef struct acpi_execute_walk
+{
+	u32 count;
+	u32 max_count;
+
+} ACPI_EXECUTE_WALK;
+
 #define PARAM_LIST(pl)                  pl
 #define DBTEST_OUTPUT_LEVEL(lvl)        if (acpi_gbl_db_opt_verbose)
 #define VERBOSE_PRINT(fp)               DBTEST_OUTPUT_LEVEL(lvl) {\
@@ -125,7 +132,7 @@ void acpi_db_generate_gpe(char *gpe_arg, char *block_arg);
 
 void acpi_db_check_predefined_names(void);
 
-void acpi_db_batch_execute(void);
+void acpi_db_batch_execute(char *count_arg);
 
 /*
  * dbdisply - debug display commands
diff --git a/drivers/acpi/acpica/utmisc.c b/drivers/acpi/acpica/utmisc.c
index 6c6a513..ba01765 100644
--- a/drivers/acpi/acpica/utmisc.c
+++ b/drivers/acpi/acpica/utmisc.c
@@ -46,10 +46,13 @@
 #include <acpi/acpi.h>
 #include "accommon.h"
 #include "acnamesp.h"
+#include "acdebug.h"
 
 #define _COMPONENT          ACPI_UTILITIES
 ACPI_MODULE_NAME("utmisc")
 
+extern u8 acpi_gbl_method_executing;
+
 /*
  * Common suffix for messages
  */
@@ -1203,3 +1206,139 @@ acpi_ut_predefined_info(const char *module_name,
 	ACPI_COMMON_MSG_SUFFIX;
 	va_end(args);
 }
+
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_db_walk_for_execute
+ *
+ * PARAMETERS:  Callback from walk_namespace
+ *
+ * RETURN:      Status
+ *
+ * DESCRIPTION: Batch execution module. Currently only executes predefined
+ *              ACPI names.
+ *
+ ******************************************************************************/
+
+static acpi_status
+acpi_db_walk_for_execute (
+	acpi_handle                     obj_handle,
+	u32                             nesting_level,
+	void                            *context,
+	void                            **return_value)
+{
+	struct acpi_namespace_node      *node = (struct acpi_namespace_node *) obj_handle;
+	ACPI_EXECUTE_WALK       *info = (ACPI_EXECUTE_WALK *) context;
+	struct acpi_buffer              return_obj;
+	acpi_status                     status;
+	char                            *pathname;
+	u32                             i;
+	struct acpi_device_info         *obj_info;
+	struct acpi_object_list         param_objects;
+	union acpi_object               params[ACPI_METHOD_NUM_ARGS];
+	const union acpi_predefined_info *predefined;
+
+
+	predefined = acpi_ns_check_for_predefined_name (node);
+	if (!predefined) {
+		return (AE_OK);
+	}
+
+	if (node->type == ACPI_TYPE_LOCAL_SCOPE) {
+		return (AE_OK);
+	}
+
+	pathname = acpi_ns_get_external_pathname (node);
+	if (!pathname) {
+		return (AE_OK);
+	}
+
+	/* Get the object info for number of method parameters */
+
+	status = acpi_get_object_info (obj_handle, &obj_info);
+	if (ACPI_FAILURE (status)) {
+		return (status);
+	}
+
+	param_objects.pointer = NULL;
+	param_objects.count  = 0;
+
+	if (obj_info->type == ACPI_TYPE_METHOD) {
+
+		/* Setup default parameters */
+
+		for (i = 0; i < obj_info->param_count; i++) {
+			params[i].type           = ACPI_TYPE_INTEGER;
+			params[i].integer.value  = 1;
+		}
+
+		param_objects.pointer    = params;
+		param_objects.count      = obj_info->param_count;
+	}
+
+	ACPI_FREE (obj_info);
+	return_obj.pointer = NULL;
+	return_obj.length = ACPI_ALLOCATE_BUFFER;
+
+	/* Do the actual method execution */
+
+	acpi_gbl_method_executing = TRUE;
+
+	status = acpi_evaluate_object (node, NULL, &param_objects, &return_obj);
+
+	/*acpi_os_printf ("%-32s returned %s\n", pathname, acpi_format_exception (status));*/
+	acpi_gbl_method_executing = FALSE;
+	ACPI_FREE (pathname);
+
+	/* Ignore status from method execution */
+
+	status = AE_OK;
+
+	/* Update count, check if we have executed enough methods */
+
+	info->count++;
+	if (info->count >= info->max_count) {
+		status = AE_CTRL_TERMINATE;
+	}
+
+	return (status);
+}
+
+
+/*******************************************************************************
+ *
+ * FUNCTION:    acpi_db_batch_execute
+ *
+ * PARAMETERS:  count_arg           - Max number of methods to execute
+ *
+ * RETURN:      None
+ *
+ * DESCRIPTION: Namespace batch execution. Execute predefined names in the
+ *              namespace, up to the max count, if specified.
+ *
+ ******************************************************************************/
+
+void
+acpi_db_batch_execute (
+	char                            *count_arg)
+{
+	ACPI_EXECUTE_WALK       info;
+
+
+	info.count = 0;
+	info.max_count = ACPI_UINT32_MAX;
+
+	if (count_arg) {
+		info.max_count = ACPI_STRTOUL (count_arg, NULL, 0);
+	}
+
+
+	/* Search all nodes in namespace */
+
+	(void) acpi_walk_namespace (ACPI_TYPE_ANY, ACPI_ROOT_OBJECT, ACPI_UINT32_MAX,
+			 acpi_db_walk_for_execute, NULL, (void *) &info, NULL);
+
+	/*acpi_os_printf ("Executed %d predefined names in the namespace\n", info.count);*/
+}
+
+ACPI_EXPORT_SYMBOL(acpi_db_batch_execute)
